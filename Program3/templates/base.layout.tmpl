{{define "base"}}
<!doctype html>
<html lang="en" >
<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport"
  content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title> Document </title>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

  <!-- VanillaJS Datepicker-->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/css/datepicker-bs5.min.css">

  <!-- Jared Reich NOTIE -->
  <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">

  <!-- Define OUR OWN STYLE:
  Refer to classes using .xxxxx{}
  Refer to existing elements (such as p) using just xxxx{}
  Refer to an unique ID using #theUniqueID{}

  <style media="screen">
  </style>

  Instead of listing styles here, use /static/css/styles.css:
  -->
  <link rel="stylesheet" type="text/css" href="/static/css/styles.css" >

</head>
{{block "css" .}}

{{end}}
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="/">Navbar</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/">Home</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/about">About</a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              Rooms
            </a>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
              <li><a class="dropdown-item" href="/lakeside">By the Lake</a></li>
              <li><a class="dropdown-item" href="/mountains">Up in the Mountains</a></li>
              <li><a class="dropdown-item" href="/sky">Gaze at the Sky</a></li>
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item" href="/sky">Contacts</a></li>
            </ul>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/reservation">Book Now</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/contact">Contacts</a>
          </li>
        </ul>
        <form class="d-flex">
          <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
          <button class="btn btn-outline-success" type="submit">Search</button>
        </form>
      </div>
    </div>
  </nav>

  {{block "content" .}}

  {{end}}



  {{block "js" .}}

  {{end}}

  <div class="container-fluid text-center">
    <div class="row my-footer" id="theFooter">
      <div class="col">
        Left
      </div>
      <div class="col">
        Middle
      </div>
      <div class="col">
        Right
      </div>
    </div>
  </div>

  <!-- Optional JavaScript; choose one of the two! -->

  <!-- Option 1: Bootstrap Bundle with Popper -->
  <!--
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
-->
<!-- Option 2: Separate Popper and Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>

<!-- VanillaJS Datepicker -->
<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/js/datepicker-full.min.js"></script>

<!-- Jared Reich NOTIE -->
<script src="https://unpkg.com/notie"></script>

<!-- SweetAlert2 -->
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- To improve load times JavaScript segments area typically placed just before </body> -->
<script>
//console.log('I am writing to the console');

let attention = Prompt();

// alert('Hello');

// Example starter JavaScript for disabling form submissions if there are invalid fields
(function () {
  'use strict'

  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  let forms = document.querySelectorAll('.needs-validation');

  // Loop over them and prevent submission
  Array.prototype.slice.call(forms)
  .forEach(function (form) {
    form.addEventListener('submit', function (event) {
      if (!form.checkValidity()) {
        event.preventDefault();
        event.stopPropagation();
      }

      form.classList.add('was-validated');
    }, false);
  });
})();

function notify(msg, msgType) {
  notie.alert({
    type: msgType, // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
    text: msg,
    stay: false, // optional, default = false
    time: 3, // optional, default = 3, minimum = 1,
    position: 'top', // optional, default = 'top', enum: ['top', 'bottom']
  });
}

function notifyModal(title, text, icon, confirmButtonText) {
  Swal.fire({
    title: title,
    text: text,
    icon: icon,
    confirmButtonText: confirmButtonText,
  });
}

// Prompt is a JavaScript module for all alerts, notifications, and custom
// popup dialogs
function Prompt() {
  let toast = function (c) {
    // The following are the default values
    // (should they not be specified by the user)
    const {
      msg = '',
      icon = 'success',
      position = 'top-end',
    } = c;
    const Toast = Swal.mixin({
      toast: true,
      title: msg,
      position: position,
      icon: icon,
      showConfirmButton: false,
      timer: 3000,
      timerProgressBar: true,
      didOpen: (toast) => {
        toast.addEventListener('mouseenter', Swal.stopTimer);
        toast.addEventListener('mouseleave', Swal.resumeTimer);
      },
    });

    Toast.fire({});
  };

  /*let success = function () {
    console.log('Clicked a button and got success in the console!');
    return 'Clicked a button and got success!';
  };*/

  let success = function (c) {
    const {
      msg = '',
      title = '',
      footer = '',

    } = c;
    Swal.fire({
      icon: 'success',
      title: title,
      text: msg,
      footer: footer,
    });
  };

  let error =  function  (c) {
    const {
      msg = '',
      title = '',
      footer = '',

    } = c;
    Swal.fire({
      icon: 'error',
      title: title,
      text: msg,
      footer: footer,
    });
  };

  async function custom(c) {
    const {
      msg= '',
      title='',
    } = c;

    const{ value: formValues } = await Swal.fire({
      title: title,
      html: msg,
      backdrop: false,
      showCancelButton: true,
      focusConfirm: false,
      willOpen: () => {
        const elem2 = document.getElementById('foo2');// VanillaJS DatePicker
        const rangepicker2 = new DateRangePicker(elem2, {
          format: 'dd/mm/yyyy',
          showOnFocus: true,
          autohide: true,
          orientation: 'left top',
        });
      },
      didOpen: () => {
        document.getElementById('start').removeAttribute('disabled');
        document.getElementById('end').removeAttribute('disabled');
      },
      preConfirm: () =>  [
          document.getElementById('start').value,
          document.getElementById('end').value,
        ],
    });

    //Check if there is a result
    if (formValues) {
      //Check if result is not due to clicking the "Cancel" button
      if (formValues.dismiss !== Swal.DismissReason.cancel) {
        //Check if result is not empty
        if (formValues[0] !== '' && formValues[1] !== '') {
          //console.log(formValues[0]);
          if (c.callback !== undefined) {
            c.callback(formValues);
            Swal.fire(JSON.stringify(formValues));
          } else {
            c.callback(false);
            Swal.fire(JSON.stringify(formValues));
          }
        }
      } else {
        c.callback(false);
      }
    }

  };

  // The function itself returns a function
  // Thus we are creating an embedded MODULE (embedded since it is not in a separate file)
  return {
    toast: toast,
    success: success,
    error: error,
    custom: custom,
  };
}

/*Creating too many functions with similar purposes
function alertSuccess(msg) { //Implementing our own function using NOTIE
notie.alert({
type: 'success', // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
text: msg,
stay: false, // optional, default = false
time: 3, // optional, default = 3, minimum = 1,
position: 'top', // optional, default = 'top', enum: ['top', 'bottom']
});
}

function alertError(msg) { //Implementing our own function using NOTIE
notie.alert({
type: 'error', // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
text: msg,
stay: false, // optional, default = false
time: 3, // optional, default = 3, minimum = 1,
position: 'top', // optional, default = 'top', enum: ['top', 'bottom']
});
}

function alertWarning(msg) { //Implementing our own function using NOTIE
notie.alert({
type: 'warning', // optional, default = 4, enum: [1, 2, 3, 4, 5, 'success', 'warning', 'error', 'info', 'neutral']
text: msg,
stay: false, // optional, default = false
time: 3, // optional, default = 3, minimum = 1,
position: 'top', // optional, default = 'top', enum: ['top', 'bottom']
});
}*/

</script>

</body>
</html>
{{end}}
